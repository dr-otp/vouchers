// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Voucher {
  id         String        @id @default(cuid())
  code       Int           @unique @default(autoincrement())
  status     VoucherStatus @default(CREATED)
  customerId String        @map("client_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  createdById String? @map("created_by_id")
  updatedById String? @map("updated_by_id")
  deletedById String? @map("deleted_by_id")

  log   VoucherLog[]
  items VoucherItem[]

  @@map("voucher")
}

model VoucherLog {
  id          String @id @default(cuid())
  description String @db.VarChar(255)

  voucherId String  @map("voucher_id")
  voucher   Voucher @relation(fields: [voucherId], references: [id], onDelete: Cascade)
  userId    String  @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("voucher_history")
}

// This is a model that represents the items in the voucher
model VoucherItem {
  id       String @id @default(cuid())
  quantity Int

  voucherId String  @map("voucher_id")
  voucher   Voucher @relation(fields: [voucherId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("voucher_item")
}

enum VoucherStatus {
  CREATED
  RECEIVED
  REJECTED
  RETURNED_TO_SENDER
  RETURNED_TO_SUPPLIER
  CANCELLED
}
